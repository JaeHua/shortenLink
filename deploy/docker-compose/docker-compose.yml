version: "3.9"

networks:
  shortener: {}

volumes:
  mysql: {}
  etcd-data: {}
  nginx-logs: {}

services:
  etcd:
    image: quay.io/coreos/etcd:v3.5.15
    command: ["etcd","--advertise-client-urls=http://etcd:2379","--listen-client-urls=http://0.0.0.0:2379","--data-dir=/etcd-data"]
    ports: ["2379:2379"]
    networks: [shortener]
    volumes: ["etcd-data:/etcd-data"]

  mysql:
    image: mysql:8.0
    environment:
      MYSQL_ROOT_PASSWORD: rootpass
      MYSQL_DATABASE: url
    ports: ["3306:3306"]
    networks: [shortener]
    volumes:
      - mysql:/var/lib/mysql  # 数据持久化
      - ../../db/migrations:/docker-entrypoint-initdb.d  # 挂载SQL文件目录
    command: --default-time-zone='Asia/Shanghai'

  redis:
    image: redis:7.2
    ports: ["6379:6379"]
    networks: [shortener]

  sequence-rpc:
    build: { context: ../.., dockerfile: deploy/docker/sequence-rpc.Dockerfile }
    networks: [shortener]
    depends_on: [mysql, etcd]

  convert-rpc:
    build: { context: ../.., dockerfile: deploy/docker/convert-rpc.Dockerfile }
    networks: [shortener]
    depends_on: [mysql, redis, etcd, sequence-rpc]

  show-rpc:
    build: { context: ../.., dockerfile: deploy/docker/show-rpc.Dockerfile }
    networks: [shortener]
    depends_on: [mysql, redis, etcd]

  convert-api:
    build: { context: ../.., dockerfile: deploy/docker/convert-api.Dockerfile }
    networks: [shortener]
    depends_on: [convert-rpc, etcd]

  show-api:
    build: { context: ../.., dockerfile: deploy/docker/show-api.Dockerfile }
    networks: [shortener]
    depends_on: [show-rpc, etcd]

  nginx:
    image: nginx:1.27
    ports: ["80:80"]
    volumes:
      - ../nginx/conf.d:/etc/nginx/conf.d:ro
      - nginx-logs:/var/log/nginx
    networks: [shortener]
    depends_on: [show-api, convert-api]

  kibana:
    image: docker.elastic.co/kibana/kibana:8.14.1
    environment: ["ELASTICSEARCH_HOSTS=http://elasticsearch:9200"]
    ports: ["5601:5601"]
    networks: [shortener]
    depends_on: [elasticsearch]

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.14.1
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
    ports: ["9200:9200"]
    networks: [shortener]
    volumes: ["esdata:/usr/share/elasticsearch/data"]
    healthcheck:
      test: ["CMD-SHELL", "curl -s -f http://localhost:9200 >/dev/null  || exit 1"]
      interval: 5s
      timeout: 3s
      retries: 30

  # 一次性初始化：创建 ingest pipeline
  es-setup:
    image: curlimages/curl:8.10.1
    depends_on:
      elasticsearch:
        condition: service_healthy
    volumes:
      - ./filebeat/pipeline-nginx-shortener.json:/pipeline.json:ro
    entrypoint:
      - sh
      - -c
      - |
        echo "waiting a bit for ES to be ready..." && sleep 3
        curl -sS -X PUT "http://elasticsearch:9200/_ingest/pipeline/nginx-shortener" \
          -H 'Content-Type: application/json' \
          --data-binary @/pipeline.json \
          && echo "pipeline installed"
    networks: [shortener]
    restart: "no"

  filebeat:
    image: docker.elastic.co/beats/filebeat:8.14.1
    user: root
    depends_on:
      elasticsearch:
        condition: service_healthy
      es-setup:
        condition: service_completed_successfully
    volumes:
      - ./filebeat/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
      - nginx-logs:/var/log/nginx
    networks: [shortener]